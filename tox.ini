# Run build and tests of the Accelize DRM library
#
# Run using tox command (see https://tox.readthedocs.io).
#
# Testing environments ("c-*" & "cpp-*" environments):
# - Theses environments accept all command line arguments supported by "pytest"
#   command used to test the DRM library (--cred, --fpga_image, ...)
# - Theses environments requires a FPGA device and a proper "cred.json" file.
#
# This file provides following common scenarios:
# - Build in debug mode and run tests with Coverage:
#
#   "tox -e build-debug,c-debug,cpp-debug,coverage-debug -- --cred=./cred.json"
#
#   It is possible to export coverage to "codecov.io" by passing the
#   "CODECOV_TOKEN" environment variable containing the CodeCov token.
#
# - Build in release mode and run tests:
#
#   "tox -e build-release,c-release,cpp-release -- --cred=./cred.json"
#
# - Build in release mode, install and run tests:
#
#   "tox -e build-install,c-install,cpp-install -- --cred=./cred.json"
#
# - Build in release mode and export packages:
#
#   "tox -e build-release,export-release"
#
#   It is required to configure export directory using the "PACKAGES_DIR"
#   environment variable.
#   It is possible to define the release number of the packages using the
#   "PACKAGES_RELEASE" environment variable (Default to "1")
#
# - Install from packages and run tests:
#
#   "tox -e package-install,c-install,cpp-install -- --cred=./cred.json"
#
#   It is required to configure package source directory using the
#   "PACKAGES_DIR" environment variable.
#

[tox]
minversion = 3.7.0
envlist = {build,c,cpp}-{debug,release,install}, coverage-debug, export-release, package-install
skipsdist = true

[testenv]
whitelist_externals = *
skip_install = True
isolated_build = False
sitepackages = True
recreate = False
install_command = python -m pip install -U {opts} {packages}

description =
    build: Accelize DRM library, build
    {c,cpp}: Accelize DRM Library tests ({envname})
    coverage: Combine coverage data and create report

deps =
    cython
    wheel
    setuptools
    pytest
    debug: pytest-cov
    debug: coverage
    debug: codecov

setenv =
    !install: PYTHONPATH = {env:PYTHONPATH:}{:}{envdir}/build/python3_bdist{:}{toxinidir}
    !install: LD_LIBRARY_PATH = /usr/local/lib64:{envdir}/build
    install: LD_LIBRARY_PATH = /usr/local/lib64
    {c,cpp}-debug: COVERAGE_FILE = {envdir}/build/.coverage.{envname}

passenv=
    # "codecov.io" token
    coverage: CODECOV_TOKEN
    # Directory to export/install packages
    export-release: PACKAGES_DIR
    package-install: PACKAGES_DIR
    # Package release
    build-{release,install}: PACKAGES_RELEASE

envdir =
    debug: {toxworkdir}/debug
    !debug: {toxworkdir}/release

changedir =
    !install: {envdir}/build
    build-install: {envdir}/build
    {c,cpp,package}-install: {toxinidir}

commands =
    # Build
    build-debug: python -m coverage erase
    build-debug: cmake -DPYTHON3=ON -DTESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON {toxinidir}
    build-{release,install}: cmake -DPYTHON3=ON -DTESTS=ON -DDOC=ON {toxinidir} -DCPACK_PACKAGE_RELEASE={env:PACKAGES_RELEASE:1}
    build: make -s -j
    build-install: make install prefix=/usr
    # Make packages
    build-release: make package
    # Export packages in PACKAGES_DIR directory
    export-release: sh -c 'mkdir -p {env:PACKAGES_DIR}'
    export-release: sh -c 'rm -Rfv {env:PACKAGES_DIR}/*'
    export-release: -sh -c 'cp -LRfpv packages/* {env:PACKAGES_DIR}'
    # install from packages in PACKAGES_DIR directory
    package-install: python {toxinidir}/deployment/install_packages.py {env:PACKAGES_DIR:}
    # Run tests
    c-!debug: python -m pytest {posargs} --backend=c
    c-debug: python -m pytest {posargs} --backend=c --cov=accelize_drm
    cpp-!debug: python -m pytest {posargs} --backend=c++
    cpp-debug: python -m pytest {posargs} --backend=c++ --cov=accelize_drm
    # Collect coverage
    coverage: -python -m coverage combine
    coverage: -lcov --capture --directory . --output-file coverage.info -q
    coverage: -lcov -r coverage.info '/usr/include/*' '*/drm_controller_sdk/*' -o coverage.info -q
    # Produce HTML coverage report
    coverage: -python -m coverage html -d report/coverage_python
    coverage: -genhtml coverage.info -q --legend -o report/coverage_c_cpp
    # Upload coverage status
    coverage: -python -m coverage xml
    coverage: -ln -s {toxinidir}/.git .
    coverage: -sed -i 's#python3_bdist/accelize_drm/_accelize_drm#python3_bdist/src/_accelize_drm#g' coverage.xml
    coverage: -python -m codecov -f coverage.xml coverage.info
    # Show coverage summary
    coverage: -python -m coverage report -m
    coverage: -lcov --list coverage.info

depends =
    {c,cpp}-debug: build-debug
    c-release: build-release, c-debug
    cpp-release: build-release, cpp-debug
    export-release: build-release
    build-install: build-release, c-release, cpp-release
    package-install: build-install, export-release
    {c,cpp}-install: build-install, package-install
    coverage: cpp-debug, c-debug, c-release, cpp-release, c-install, cpp-install
