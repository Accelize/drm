---
name: DRM Library documentation

trigger:
  branches:
    include:
      - master
      - dev
  paths:
    include:
      # Version definition
      - CMakeLists.txt
      # Documentation pipeline script
      - deployment/azure-pipelines-docs.yml
      # Sphinx documentation source
      - doc/*
      # C/C++ API documentation generated by Doxygen + Breath
      - include/accelize/drm/drm_manager.h
      - include/accelize/drm/error.h
      - include/accelize/drmc/wrapper.h
      - include/accelize/drmc/errorcode.h
      # Python API documentation generated by Autodoc
      - python/accelize_drm/__init__.py
      - python/accelize_drm/exceptions.py
      - python/src/_accelize_drm.pyx
      - python/src/_accelize_drmc.pyx
pr: none

variables:
  variables:
    cacheDir: $(Agent.TempDirectory)/.pipeline_cache
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    releaseChannel: stable
  ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    releaseChannel: prerelease

pool:
  vmImage: ubuntu-20.04

stages:

  - stage:
    displayName: Update documentation
    jobs:
      - job:
        displayName: Update documentation
        steps:

        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            addToPath: true
            architecture: 'x64'
          displayName: Get Python

        - task: Cache@2
          inputs:
            key: 'cache | "$(Agent.OS)"'
            path: $(cacheDir)
          displayName: Cache packages and CCache

        - script: |
            sudo apt-get -q update
            sudo apt-get -q install -y --no-install-recommends ccache doxygen g++ libcurl4-openssl-dev libjsoncpp-dev make pkg-config
            pip install -q --disable-pip-version-check breathe cython sphinx_rtd_theme wheel
            pip --disable-pip-version-check list
            echo "##vso[task.prependpath]/usr/lib/ccache"
          displayName: Install dependencies
          env:
            PIP_CACHE_DIR: $(cacheDir)/.pip_packages

        - script: |
            mkdir build_doc
            cd build_doc
            cmake -DPYTHON3=ON -DDOC=ON ..
            make -s -j
          displayName: Build documentation
          env:
            CCACHE_DIR: $(cacheDir)/.ccache

        - task: AWSCLI@1
          displayName: Publish documentation
          inputs:
            awsCredentials: AWS-Repository
            regionName: eu-west-1
            awsCommand: s3
            awsSubCommand: sync
            awsArguments: build_doc/doc_html
                          s3://accelize/documentation/$(releaseChannel)/
                          --no-progress --delete
