---
name: DRM Library tests and release

schedules:
# Run tests from package major branches weekly, including packages build on all OS
- cron: "0 0 * * *"
  displayName: Daily midnight test of packages
  branches:
    include:
    - master
  always: true
pr: none

resources:
  repositories:
    - repository: acid
      type: github
      name: Accelize/acid
      endpoint: Accelize

pool:
  vmImage: ubuntu-latest

variables:
  # Import variable group
  - group: drmLibrary

  # Allow import of python files in "deployment" dir
  - name: pythonPath
    value: $(Build.SourcesDirectory)/deployment

  # Common commands shortcut
  - name: pipInstall
    value: pip install --disable-pip-version-check
  - name: aptInstall
    value: sudo apt-get update &&
           sudo apt-get install -y --no-install-recommends

jobs:
  - template: runTestFromPkgOnEc2.yml
    parameters:
      instance_type: 'f1.4xlarge'
      config_list:
      - os_distrib: 'centos_7'
        tox_extra_option: '-m minimum'
      - os_distrib: 'ubuntu_18_04'
        tox_extra_option: '-m minimum'

  - stage: release
    displayName: Release
    # Build packages only if tagged or scheduled
    condition: and(succeeded(), or(
                   startsWith(variables['Build.SourceBranch'], 'refs/tags'),
                   eq(variables['Build.Reason'], 'Schedule')))
    dependsOn: tests
    variables:
      # File that store release number for each version
      versionsJson: versions.json
      versionsJsonS3: s3://accelize/versions.json

    jobs:
      - job: buildPackages
        displayName: Build Packages for
        strategy:
          matrix:
            # Supported OS matrix
            CentOS 7:
              osName: centos
              osVersion: "7"
            CentOS 8:
              osName: centos
              osVersion: "8"
            Debian 9:
              osName: debian
              osVersion: "9"
            Debian 10:
              osName: debian
              osVersion: "10"
            Fedora 31:
              osName: fedora
              osVersion: "31"
            Fedora 32:
              osName: fedora
              osVersion: "32"
            Ubuntu LTS 16.04:
              osName: ubuntu
              osVersion: "16.04"
            Ubuntu LTS 18.04:
              osName: ubuntu
              osVersion: "18.04"
            Ubuntu LTS 20.04:
              osName: ubuntu
              osVersion:  "20.04"
            Ubuntu 19.10:
              osName: ubuntu
              osVersion:  "19.10"

        variables:
          # Docker commands shortcuts
          dockerBuild: sudo docker build -t run_image .
          dockerRun: sudo -E docker run --rm
                     --env GPG_PASS_PHRASE
                     --env GPG_PRIVATE_KEY
                     --env GPG_PUBLIC_KEY
                     --env PACKAGES_RELEASE
                     -v $(Build.SourcesDirectory):/opt
                     -v $(Agent.TempDirectory):$(Agent.TempDirectory)
                     -w /opt run_image bash -c
        steps:

          # Initialize environment
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
              architecture: 'x64'
            displayName: Get Python

          # Get package release, and increment it if an already published
          # version is re-build
          - task: AWSCLI@1
            displayName: Get published releases manifest
            inputs:
              awsCredentials: AWS-Repository
              regionName: eu-west-1
              awsCommand: s3
              awsSubCommand: cp
              awsArguments: $(versionsJsonS3) $(versionsJson) --no-progress

          - task: PythonScript@0
            displayName: Get package release
            inputs:
              scriptSource: inline
              script: |
                from acid import export
                from acid_drm import get_next_package_release
                export("release", get_next_package_release("versions.json"))
            name: packagesRelease

          # Build & sign packages
          - task: PythonScript@0
            displayName: Create "building" container Dockerfile
            inputs:
              scriptSource: inline
              script: |
                from acid import render_template
                render_template(
                    src='$(Build.SourcesDirectory)/deployment/Dockerfile.j2',
                    dst='$(Build.SourcesDirectory)/Dockerfile',
                    osName='$(osName)', osVersion='$(osVersion)',
                    image='$(osName):$(osVersion)', buildLayer=True)

          - script: $(dockerBuild)
            displayName: Build "building" container image

          - task: DownloadSecureFile@1
            displayName: Get GPG public key
            name: gpgPublicKey
            inputs:
              secureFile: gpgPublicKey

          - task: DownloadSecureFile@1
            displayName: Get GPG private key
            name: gpgPrivateKey
            inputs:
              secureFile: gpgPrivateKey

          - script: $(dockerRun) "tox --workdir /tmp -o
                    -e build-release,sign-release,export-release"
            displayName: Build and sign packages
            env:
              PACKAGES_RELEASE: $(packagesRelease.release)
              GPG_PRIVATE_KEY: $(gpgPrivateKey.secureFilePath)
              GPG_PUBLIC_KEY: $(gpgPublicKey.secureFilePath)
              GPG_PASS_PHRASE: $(gpgPassPhrase)

          # Run packages integrity tests
          - task: PythonScript@0
            displayName: Create "testing" container Dockerfile
            inputs:
              scriptSource: inline
              script: |
                from acid import render_template
                render_template(
                    src='$(Build.SourcesDirectory)/deployment/Dockerfile.j2',
                    dst='$(Build.SourcesDirectory)/Dockerfile',
                    osName='$(osName)', osVersion='$(osVersion)',
                    image='$(osName):$(osVersion)', buildLayer=False)

          - script: $(dockerBuild)
            displayName: Build "testing" container image

          - script: $(dockerRun) "tox --workdir /tmp
                    -e package-install,c-install,cpp-install -p all
                    -- -m packages"
            displayName: Run tests on packages

