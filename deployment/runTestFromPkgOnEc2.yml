---
# runTestFromPkgOnEc2.yml

parameters:
  identifier: 'test_on_aws'
  description: 'Test on AWS'
  instance_type: 'f1.4xlarge'
  repo: 'stable'
  config_list:
  - os_distrib: 'centos_7'
    tox_operation: '-e cpp-install,c-install,noparallel-install'
    tox_extra_option: ''

jobs:
- ${{ each config in parameters.config_list }}: # For each config
  # Start AWS agents
  - template: agents/start.yml@acid
    parameters:
      jobName: startAgent_${{ parameters.identifier }}_on_${{ config.os_distrib }}
      agentDescription: ${{ parameters.description }} on AWS ${{ config.os_distrib }}
      provider: awsEc2
      image: ${{ config.os_distrib }}
      instanceType: ${{ parameters.instance_type }}
      agentVersion: 2.175.2
      ansiblePlaybook: deployment/playbook_test_pkg.yml
      ansibleRequirements: deployment/requirements.yml
      dependsOn:
      - ${{ if config.dependsOn }}:
        - runTests_${{ parameters.identifier }}_on_${{ config.dependsOn }}
      condition: succeededOrFailed()

  # Install Package on AWS agent
  - job: runTests_${{ parameters.identifier }}_on_${{ config.os_distrib }}
    displayName: Install and test ${{ parameters.description }} on ${{ config.os_distrib }}
    dependsOn: startAgent_${{ parameters.identifier }}_on_${{ config.os_distrib }}
    condition: succeededOrFailed()
    pool:
      name: Default
      demands:  # Use previously instantiated agent
        - agent.Name -equals $(Build.BuildId) ${{ parameters.description }} on AWS ${{ config.os_distrib }}
    steps:
      - checkout: self
        submodules: true

      - script: |
          cat << EOF > $(Build.SourcesDirectory)/cred.json
          {
            "client_id": "$(clientIdUserMetering)",
            "client_secret": "$(clientSecretUserMetering)",

            "name__admin__":"Admin_JBL_Regression",
            "client_id__admin__":"$(clientIdAdmin)",
            "client_secret__admin__":"$(clientSecretAdmin)",

            "client_id__test-noentitlement__": "$(clientIdUserNoEntitlement)",
            "client_secret__test-noentitlement__": "$(clientSecretUserNoEntitlement)",

            "client_id__test-metering__": "$(clientIdUserMetering)",
            "client_secret__test-metering__": "$(clientSecretUserMetering)",

            "client_id__test-nodelock__": "$(clientIdUserNodelock)",
            "client_secret__test-nodelock__": "$(clientSecretUserNodelock)",

            "client_id__test-limited__": "$(clientIdUserLimited)",
            "client_secret__test-limited__": "$(clientSecretUserLimited)",

            "client_id__test-floating__": "$(clientIdUserFloating)",
            "client_secret__test-floating__": "$(clientSecretUserFloating)",

            "client_id__test-hybrid__": "$(clientIdUserHybrid)",
            "client_secret__test-hybrid__": "$(clientSecretUserHybrid)",
          }
          EOF
        displayName: Create Accelize credentials file

      - script: |
          sudo yum install -y yum-utils python3-pip
          sudo yum-config-manager --add-repo https://tech.accelize.com/rpm/accelize_${{ parameters.repo }}.repo
          sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          sudo yum install -y python3-accelize-drm
          sudo yum install -y libaccelize-drm
          sudo yum install -y libaccelize-drm-devel
        displayName: Install drmlib from package on centos
        condition: ${{ contains(config.os_distrib, 'centos') }}

      - script: |
          sudo apt update
          sudo apt install -y apt-transport-https software-properties-common lsb-release gnupg curl python3-pip
          curl -fsSL https://tech.accelize.com/gpg | sudo apt-key add -
          sudo add-apt-repository "deb https://tech.accelize.com/deb $(lsb_release -cs) ${{ parameters.repo }}"
          sudo apt update
          sudo apt install -y python3-accelize-drm
          sudo apt install -y libaccelize-drm
          sudo apt install -y libaccelize-drm-dev
        displayName: Install drmlib from package on ubuntu
        condition: ${{ contains(config.os_distrib, 'ubuntu') }}

      - script: sudo -E tox ${{ config.tox_operation }}
                -- --cred=$(Build.SourcesDirectory)/cred.json --server=prod --artifacts_dir=$(Build.SourcesDirectory)/artifacts -ra ${{ config.tox_extra_option }}
        displayName: Run tests from package with Tox on ${{ config.os_distrib }}
        env:
          TOX_PARALLEL_NO_SPINNER: 1

      - publish: $(Build.SourcesDirectory)/artifacts
        artifact: AWS_Artifacts_${{ parameters.identifier }}_on_${{ config.os_distrib }}
        displayName: Publish AWS Artifacts for ${{ parameters.identifier }} on ${{ config.os_distrib }} package tests
        condition: always()

  # Stop AWS agent
  - template: agents/stop.yml@acid
    parameters:
      jobName: stopAgent_${{ parameters.identifier }}_on_${{ config.os_distrib }}
      provider: awsEc2
      agentDescription: ${{ parameters.description }} on AWS ${{ config.os_distrib }}
      dependsOn: runTests_${{ parameters.identifier }}_on_${{ config.os_distrib }}
