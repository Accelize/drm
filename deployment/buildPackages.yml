---
# Build Packages

jobs:
  - job: buildPackages
    displayName: Build Packages for
    strategy:
      matrix:
        # Supported OS matrix
        CentOS 7:
          osName: centos
          osVersion: "7"
        CentOS 8 Stream:
          osName: centos
          osVersion: "8"
          image: quay.io/centos/centos:stream8
        CentOS 9 Stream:
          osName: centos
          osVersion: "9"
          image: quay.io/centos/centos:stream9
        Debian 10:
          osName: debian
          osVersion: "10"
        Debian 11:
          osName: debian
          osVersion: "11"
        Fedora 35:
          osName: fedora
          osVersion: "35"
        Fedora 36:
          osName: fedora
          osVersion: "36"
        Ubuntu LTS 18.04:
          osName: ubuntu
          osVersion: "18.04"
        Ubuntu LTS 20.04:
          osName: ubuntu
          osVersion:  "20.04"
        Ubuntu LTS 22.04:
          osName: ubuntu
          osVersion:  "22.04"
        Ubuntu 22.10:
          osName: ubuntu
          osVersion:  "22.10"

    variables:
      image: ""
      # Docker commands shortcuts
      dockerBuild: sudo docker build -t run_image .
      dockerRun: sudo -E docker run --rm
                 -v $(Build.SourcesDirectory):/opt
                 -v $(Agent.TempDirectory):$(Agent.TempDirectory)
                 -w /opt run_image bash -c
    steps:

      # Initialize environment
      - checkout: self
        submodules: true

      # Build packages
      - task: PythonScript@0
        displayName: Create "building" container Dockerfile
        inputs:
          scriptSource: inline
          script: |
            from azure_pipeline_utils import render_template
            render_template(
                src='deployment/Dockerfile.j2',
                dst='Dockerfile',
                osName='$(osName)', osVersion='$(osVersion)',
                image='$(image)' or '$(osName):$(osVersion)',
                buildLayer=True)

      - script: $(dockerBuild)
        displayName: Build "building" container image

      - script: $(dockerRun) "tox --workdir /tmp -o -e build-release,export-release"
        displayName: Build packages

      # Run packages integrity tests
      - task: PythonScript@0
        displayName: Create "testing" container Dockerfile
        inputs:
          scriptSource: inline
          script: |
            from azure_pipeline_utils import render_template
            render_template(
                src='deployment/Dockerfile.j2',
                dst='Dockerfile',
                osName='$(osName)', osVersion='$(osVersion)',
                image='$(image)' or '$(osName):$(osVersion)',
                buildLayer=False)

      - script: $(dockerBuild)
        displayName: Build "testing" container image

      - script: $(dockerRun) "tox --workdir /tmp
                -e package-install,c-install,cpp-install -p all
                -- -m packages"
        displayName: Run tests on package

      # Run extra RHEL integrity tests for CentOS packages
      - task: PythonScript@0
        displayName: Create "RHEL testing" container Dockerfile
        inputs:
          scriptSource: inline
          script: |
            from azure_pipeline_utils import render_template
            render_template(
                src='deployment/Dockerfile.j2',
                dst='Dockerfile',
                osName='rhel', osVersion='$(osVersion)',
                image='registry.access.redhat.com/ubi$(osVersion)',
                rhelUsername='$(rhelUsername)',
                rhelPassword='$(rhelPassword)',
                buildLayer=False)
        condition: eq(variables['osName'], 'centos')

      - script: $(dockerBuild)
        displayName: Build "RHEL testing" container image
        condition: eq(variables['osName'], 'centos')

      - script: $(dockerRun) "tox --workdir /tmp
                -e package-install,c-install,cpp-install -p all
                -- -m packages"
        displayName: Run RHEL tests on packages
        condition: eq(variables['osName'], 'centos')

      # Export packages as artifacts
      - publish: packages
        artifact: Packages $(osName) $(osVersion)
        displayName: Publish packages as artifacts
