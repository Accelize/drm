# AWS CodeBuild
version: 0.2

env:
  parameter-store:
    # Toolbox: Retrieve encryption key
    XLZCRYPT_KEY: "xlzcrypt_key"

phases:
  install:
    commands:
      # Toolbox: Initialize
      - sudo $CODEBUILD_SRC_DIR_toolbox/install.py

      # Artifacts output directory
      - mkdir artifacts

      # Save environment as artifact
      - export | grep CODEBUILD >artifacts/env.txt

  build:
    commands:
      # Run Debug tests
      - xlz
        --if git_file_changed='(?!test/utils/|doc/|deployment/|LICENSE|README\\.md|\\.gitgnore)'
        run
        drmlib_dev=$CODEBUILD_SOURCE_VERSION drmlib_build_deps
        drmlib_unittests_deps drmlib_cred_json drmlib_codecov_token
        aws_fpga_sdk
        -p f1.4xlarge
        -n drm_debug_tests
        -z /dev/shm/drmlib_dev/.tox/debug/build/report artifacts/report.tar.gz
        -r "cd /dev/shm/drmlib_dev &&
            sudo -E tox -p all -e build-debug,cpp-debug,c-debug,integration-debug,coverage-debug -- --cred=/dev/shm/cred.json"

      # Build documentation
      - xlz
        --if git_file_changed='doc/|include/|python/src|python/accelize_drm'
        --if git_branch=master,dev
        install
        drmlib_build_deps
        drmlib_doc_deps
        -r "mkdir build_doc &&
            cd build_doc &&
            cmake -DPYTHON3=ON -DDOC=ON .. &&
            make -s -j &&
            tar -zcf ../artifacts/doc.tar.gz ./doc_html"

      # Upload documentation
      - xlz
        --if file_exists=artifacts/doc.tar.gz
        install
        drmlib_publish_doc=artifacts/doc.tar.gz

      # Build packages
      - xlz
        --if git_head_tagged
        --if git_branch=master,dev
        run
        drmlib_dev=$CODEBUILD_SOURCE_VERSION
        drmlib_package_release drmlib_packages_key=/opt/src
        docker_compose
        -p c5.4xlarge
        -s ubuntu
        -n accelize_drm_packages_build
        -z /dev/shm/drmlib_dev/deployment/packages artifacts/packages.tar.gz
        -r "cd /dev/shm/drmlib_dev/deployment && sudo -E docker-compose pull &&
            sudo -E docker-compose up"

      # Tests packages
      - xlz
        --if file_exists=artifacts/packages.tar.gz
        run
        docker
        drmlib_dev=dev drmlib_cred_json
        -s ubuntu
        -p f1.4xlarge
        -n drm_packages_tests
        --gz_upload artifacts/packages.tar.gz /dev/shm/packages
        -x OS centos_7
        -x OS debian_stretch
        -x OS debian_testing
        -x OS fedora_latest
        # TODO: AWS FGPA SDK do not build, wait for fixed version (Fixed on Github dev branch)
        #-x OS ubuntu_bionic
        #-x OS ubuntu_rolling
        #-x OS ubuntu_xenial
        -r 'cd /dev/shm &&
            sudo docker run -ti --privileged
            -e PACKAGES_DIR=/opt/packages/~{OS}~
            -v /dev/shm:/opt/
            accelize/accelizedrm-ci:test-aws_f1-~{OS}~
            bash -c "cd /opt/drmlib_dev &&
                     tox --workdir=/tmp
                     -e package-install,c-install,cpp-install
                     -p all -- --cred=/opt/cred.json"'

      # Upload packages to repository
      - xlz
        --if file_exists=artifacts/packages.tar.gz
        install
        drmlib_publish_packages=artifacts/packages.tar.gz

artifacts:
  files:
    - artifacts/*
  discard-paths: yes
