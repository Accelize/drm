# AWS CodeBuild
version: 0.2

env:
  variables:
    HWT_LOG_FILE: "hwtest.log"
    ARTIFACTS_DIR: "HWT"
  parameter-store:
    # Toolbox: Retrieve encryption key
    XLZCRYPT_KEY: "xlzcrypt_key"

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      # Artifacts output directory
      - mkdir -p $ARTIFACTS_DIR

      # Toolbox: Initialize
      - $CODEBUILD_SRC_DIR_toolbox/install.py

      # Save environment as artifact
      - DATETIME=$(date +%F_%Hh%Mm%Ss)
      - echo "DATE-TIME ${DATETIME}" > $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - ARTIFACTS_NAME=${XLZ_REFDESIGN_TARGET}_${XLZ_REFDESIGN_NAME}_${DATETIME}_${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - echo "ARTIFACTS_NAME:" >> $ARTIFACTS_DIR/env.txt
      - echo "${ARTIFACTS_NAME}" >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - cat /etc/*-release >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "CODEBUILD:" >> $ARTIFACTS_DIR/env.txt
      - export | grep CODEBUILD >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "PYTHON VERSION:" >> $ARTIFACTS_DIR/env.txt
      - python3 --version >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "PYTHON PACKAGES:" >> $ARTIFACTS_DIR/env.txt
      - pip3 list >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "LINUX PACKAGES:" >> $ARTIFACTS_DIR/env.txt
      - apt list --installed >> $ARTIFACTS_DIR/env.txt

      - head -80 $ARTIFACTS_DIR/env.txt

  build:
    commands:
      # Determine the branch in order to set the Web Service working environment
      - |
        if git describe --tags --exact-match $CODEBUILD_RESOLVED_SOURCE_VERSION; then
          export WS_ENV="prod"
        elif git rev-list master | grep -q $CODEBUILD_RESOLVED_SOURCE_VERSION; then
          export WS_ENV="prod"
        else
          export WS_ENV="dev"
        fi
      - echo "WS_ENV=${WS_ENV}"
      - |
        if git describe --tags --exact-match $CODEBUILD_RESOLVED_SOURCE_VERSION || [ -z "${CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID}" ]; then
          export FILTER_SOURCES=""
          export FILTER_BRANCH=""
        else
          export FILTER_SOURCES='--if git_file_changed=(?!tests/utils/|doc/|LICENSE|README\.md|\.gitignore)'
          export FILTER_BRANCH='--if git_branch=master,dev'
        fi
      - |
        if [ -z "${XLZ_REFDESIGN_PYTEST_ARGS}" ] || [ "${XLZ_REFDESIGN_PYTEST_ARGS}" -eq "0" ]; then
          PYTEST_ARGS_OPTION=""
        else
          PYTEST_ARGS_OPTION="${XLZ_REFDESIGN_PYTEST_ARGS}"
        fi
      - echo "FILTER_SOURCES=${FILTER_SOURCES}"
      - echo "FILTER_BRANCH=${FILTER_BRANCH}"
      - echo "PYTEST_ARGS_OPTION=${PYTEST_ARGS_OPTION}"

      # Run tests
      - xlz
        ${FILTER_SOURCES}
        ${FILTER_BRANCH}
        run
        drmlib_dev=${CODEBUILD_RESOLVED_SOURCE_VERSION} drmlib_build_deps
        drmlib_unittests_deps drmlib_cred_json drmlib_codecov_token
        aws_fpga_sdk
        -v
        --shutdown_after 30
        -p f1.4xlarge
        -n drm_debug_tests
        -z /dev/shm/drmlib_dev/.tox/debug/build/report ${ARTIFACTS_DIR}/report.tar.gz
        -r "source /dev/shm/aws-fpga/sdk_setup.sh && cd /dev/shm/drmlib_dev &&
            sudo -E TOX_PARALLEL_NO_SPINNER=1 tox -p all -e aws-build-debug,cpp-debug,c-debug,integration-debug -- --cred=/dev/shm/cred.json --server=${WS_ENV} -x -s -m minimum ${PYTEST_ARGS_OPTION}"
        - tar -xzf ${ARTIFACTS_DIR}/report.tar.gz ${ARTIFACTS_DIR}
        - rm ${ARTIFACTS_DIR}/report.tar.gz

artifacts:
  files:
    - 'HWT/**/*'
  name: ${ARTIFACTS_NAME}
