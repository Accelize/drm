# AWS CodeBuild
version: 0.2

env:
  parameter-store:
    # Toolbox: Retrieve encryption key
    XLZCRYPT_KEY: "xlzcrypt_key"
    ARTIFACTS_DIR: "HWT"

phases:
  install:
    commands:
      # Toolbox: Initialize
      - $CODEBUILD_SRC_DIR_toolbox/install.py

      # Artifacts output directory
      - mkdir -p $ARTIFACTS_DIR

      # Save environment as artifact
      - DATETIME=$(date +%F_%Hh%Mm%Ss)
      - echo "DATE-TIME ${DATETIME}" > $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - ARTIFACTS_NAME=${XLZ_REFDESIGN_TARGET}_${XLZ_REFDESIGN_NAME}_${DATETIME}_${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - echo "ARTIFACTS_NAME:" >> $ARTIFACTS_DIR/env.txt
      - echo "${ARTIFACTS_NAME}" >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - cat /etc/*-release >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "CODEBUILD:" >> $ARTIFACTS_DIR/env.txt
      - export | grep CODEBUILD >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "PYTHON VERSION:" >> $ARTIFACTS_DIR/env.txt
      - python3 --version >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "PYTHON PACKAGES:" >> $ARTIFACTS_DIR/env.txt
      - pip3 list >> $ARTIFACTS_DIR/env.txt
      - echo "" >> $ARTIFACTS_DIR/env.txt

      - echo "LINUX PACKAGES:" >> $ARTIFACTS_DIR/env.txt
      - apt list --installed >> $ARTIFACTS_DIR/env.txt

      - head -80 $ARTIFACTS_DIR/env.txt

  build:
    commands:
      # Determine the branch in order to set the Web Service working environment
      - |
        if git describe --tags --exact-match $CODEBUILD_RESOLVED_SOURCE_VERSION; then
          export WS_ENV="prod"
        elif git rev-list master | grep -q $CODEBUILD_RESOLVED_SOURCE_VERSION; then
          export WS_ENV="prod"
        else
          export WS_ENV="dev"
        fi
      - echo "WS_ENV=${WS_ENV}"
      - |
        if git describe --tags --exact-match $CODEBUILD_RESOLVED_SOURCE_VERSION || [ -z "${CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID}" ]; then
          export FILTER_SOURCES=""
          export FILTER_BRANCH=""
        else
          export FILTER_SOURCES='--if git_file_changed=(?!tests/utils/|doc/|LICENSE|README\.md|\.gitignore)'
          export FILTER_BRANCH='--if git_branch=master,dev'
        fi
      - |
        if [ -z "${XLZ_REFDESIGN_PYTEST_ARGS}" ] || [ "${XLZ_REFDESIGN_PYTEST_ARGS}" -eq "0" ]; then
          PYTEST_ARGS_OPTION=""
        else
          PYTEST_ARGS_OPTION="${XLZ_REFDESIGN_PYTEST_ARGS}"
        fi
      - echo "FILTER_SOURCES=${FILTER_SOURCES}"
      - echo "FILTER_BRANCH=${FILTER_BRANCH}"
      - echo "PYTEST_ARGS_OPTION=${PYTEST_ARGS_OPTION}"

      # Build documentation
      - xlz
        --if git_file_changed='doc/|include/|python/src|python/accelize_drm$'
        ${FILTER_BRANCH}
        install
        drmlib_build_deps
        drmlib_doc_deps
        -r "mkdir build_doc &&
        cd build_doc &&
        cmake -DPYTHON3=ON -DDOC=ON .. &&
        make -s -j &&
        tar -zcf ../${ARTIFACTS_DIR}/doc.tar.gz ./doc_html"
        -v

      # Upload documentation
      - xlz
        --if file_exists=${ARTIFACTS_DIR}/doc.tar.gz
        install
        drmlib_publish_doc=${ARTIFACTS_DIR}/doc.tar.gz
        -v

      # Run tests
      - xlz
        ${FILTER_SOURCES}
        ${FILTER_BRANCH}
        run
        drmlib_dev=${CODEBUILD_RESOLVED_SOURCE_VERSION} drmlib_build_deps
        drmlib_unittests_deps drmlib_cred_json drmlib_codecov_token
        aws_fpga_sdk
        -v
        --shutdown_after 30
        -p f1.4xlarge
        -n drm_debug_tests
        -z /dev/shm/drmlib_dev/.tox/debug/build/report ${ARTIFACTS_DIR}/report.tar.gz
        -r "source /dev/shm/aws-fpga/sdk_setup.sh && cd /dev/shm/drmlib_dev &&
            sudo -E TOX_PARALLEL_NO_SPINNER=1 tox -p all -e aws-build-debug,cpp-debug,c-debug,integration-debug,coverage-debug -- --cred=/dev/shm/cred.json --server=${WS_ENV} -x -s ${PYTEST_ARGS_OPTION}"

      # Build packages
      - xlz
        --if git_head_tagged
        run
        drmlib_dev=$CODEBUILD_RESOLVED_SOURCE_VERSION
        drmlib_package_release drmlib_packages_key=/opt/src
        docker_compose
        --shutdown_after 15
        -p c5.4xlarge
        --volume_size=30
        -s ubuntu
        -n accelize_drm_packages_build
        -z /dev/shm/drmlib_dev/deployment/packages ${ARTIFACTS_DIR}/packages.tar.gz
        -r "cd /dev/shm/drmlib_dev/deployment && sudo -E docker-compose pull &&
            sudo -E docker-compose up"

      # Tests packages
      - xlz
        --if file_exists=${ARTIFACTS_DIR}/packages.tar.gz
        run
        docker
        drmlib_dev=$CODEBUILD_RESOLVED_SOURCE_VERSION drmlib_cred_json
        --shutdown_after 240
        -s ubuntu
        -p f1.4xlarge
        -n drm_packages_tests
        --gz_upload ${ARTIFACTS_DIR}/packages.tar.gz /dev/shm/packages
        -x OS centos_7
        -x OS centos_8
        -x OS debian_buster
        -x OS debian_stretch
        -x OS debian_testing
        -x OS fedora_previous_latest
        -x OS fedora_latest
        -x OS ubuntu_bionic
        -x OS ubuntu_previous_rolling
        -x OS ubuntu_rolling
        -x OS ubuntu_xenial
        -x SERVER $WS_ENV
        -r 'cd /dev/shm &&
            sudo docker run --privileged
            -e PACKAGES_DIR=/opt/packages/~{OS}~
            -v /dev/shm:/opt/
            accelize/accelizedrm-ci:test-aws_f1-~{OS}~
            bash -c "cd /opt/drmlib_dev &&
                     export TOX_PARALLEL_NO_SPINNER=1 && tox --workdir=/tmp
                     -e package-install,c-install,cpp-install
                     -p all -- -m minimum --cred=/opt/cred.json --server=~{SERVER}~"'

      # Upload packages to repository
      - xlz
        --if file_exists=${ARTIFACTS_DIR}/packages.tar.gz
        install
        drmlib_publish_packages=${ARTIFACTS_DIR}/packages.tar.gz
        -v

artifacts:
  files:
    - '**/*'
  name: ${ARTIFACTS_NAME}
